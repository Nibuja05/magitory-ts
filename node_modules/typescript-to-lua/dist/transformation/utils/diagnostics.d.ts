import * as ts from "typescript";
import { LuaTarget } from "../../CompilerOptions";
import { AnnotationKind } from "./annotations";
export declare const unsupportedNodeKind: ((node: ts.Node, kind: ts.SyntaxKind) => ts.Diagnostic) & {
    code: number;
};
export declare const forbiddenForIn: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const unsupportedNoSelfFunctionConversion: ((node: ts.Node, name?: string | undefined) => ts.Diagnostic) & {
    code: number;
};
export declare const unsupportedSelfFunctionConversion: ((node: ts.Node, name?: string | undefined) => ts.Diagnostic) & {
    code: number;
};
export declare const unsupportedOverloadAssignment: ((node: ts.Node, name?: string | undefined) => ts.Diagnostic) & {
    code: number;
};
export declare const decoratorInvalidContext: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const annotationInvalidArgumentCount: ((node: ts.Node, kind: AnnotationKind, got: number, expected: number) => ts.Diagnostic) & {
    code: number;
};
export declare const extensionCannotConstruct: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const extensionCannotExtend: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const extensionCannotExport: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const extensionInvalidInstanceOf: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const extensionAndMetaExtensionConflict: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const metaExtensionMissingExtends: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const invalidForRangeCall: ((node: ts.Node, message: string) => ts.Diagnostic) & {
    code: number;
};
export declare const luaTableMustBeAmbient: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const luaTableCannotBeExtended: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const luaTableInvalidInstanceOf: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const luaTableCannotBeAccessedDynamically: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const luaTableForbiddenUsage: ((node: ts.Node, description: string) => ts.Diagnostic) & {
    code: number;
};
export declare const luaIteratorForbiddenUsage: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const unsupportedAccessorInObjectLiteral: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const unsupportedRightShiftOperator: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const unsupportedForTarget: ((node: ts.Node, functionality: string, version: LuaTarget.Lua51 | LuaTarget.Lua52 | LuaTarget.Lua53 | LuaTarget.LuaJIT) => ts.Diagnostic) & {
    code: number;
};
export declare const unsupportedProperty: ((node: ts.Node, parentName: string, property: string) => ts.Diagnostic) & {
    code: number;
};
export declare const invalidAmbientIdentifierName: ((node: ts.Node, text: string) => ts.Diagnostic) & {
    code: number;
};
export declare const unresolvableRequirePath: ((node: ts.Node, path: string) => ts.Diagnostic) & {
    code: number;
};
export declare const unsupportedVarDeclaration: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const invalidMultiFunctionUse: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const invalidMultiTypeToNonArrayBindingPattern: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const invalidMultiTypeToNonArrayLiteral: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const invalidMultiTypeToEmptyPatternOrArrayLiteral: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const invalidMultiTypeArrayBindingPatternElementInitializer: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const invalidMultiTypeArrayLiteralElementInitializer: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const invalidMultiReturnAccess: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const unsupportedMultiFunctionAssignment: ((node: ts.Node, ...args: any[]) => ts.Diagnostic) & {
    code: number;
};
export declare const annotationDeprecated: ((node: ts.Node, kind: AnnotationKind) => ts.Diagnostic) & {
    code: number;
};
