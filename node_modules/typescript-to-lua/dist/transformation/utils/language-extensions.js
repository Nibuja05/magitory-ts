"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExtensionKind = exports.ExtensionKind = void 0;
const ts = require("typescript");
const path = require("path");
var ExtensionKind;
(function (ExtensionKind) {
    ExtensionKind["MultiFunction"] = "MultiFunction";
    ExtensionKind["MultiType"] = "MultiType";
})(ExtensionKind = exports.ExtensionKind || (exports.ExtensionKind = {}));
function isSourceFileFromLanguageExtensions(sourceFile) {
    const extensionDirectory = path.resolve(__dirname, "../../../language-extensions");
    const sourceFileDirectory = path.dirname(path.normalize(sourceFile.fileName));
    return extensionDirectory === sourceFileDirectory;
}
function getExtensionKind(declaration) {
    var _a;
    const sourceFile = declaration.getSourceFile();
    if (isSourceFileFromLanguageExtensions(sourceFile)) {
        if (ts.isFunctionDeclaration(declaration) && ((_a = declaration === null || declaration === void 0 ? void 0 : declaration.name) === null || _a === void 0 ? void 0 : _a.text) === "$multi") {
            return ExtensionKind.MultiFunction;
        }
        if (ts.isTypeAliasDeclaration(declaration) && declaration.name.text === "MultiReturn") {
            return ExtensionKind.MultiType;
        }
        throw new Error("Unknown extension kind");
    }
}
exports.getExtensionKind = getExtensionKind;
//# sourceMappingURL=language-extensions.js.map