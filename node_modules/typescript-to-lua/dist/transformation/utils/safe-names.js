"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSafeName = exports.hasUnsafeIdentifierName = exports.hasUnsafeSymbolName = exports.isUnsafeName = exports.luaKeywords = exports.isValidLuaIdentifier = void 0;
const diagnostics_1 = require("./diagnostics");
const export_1 = require("./export");
const typescript_1 = require("./typescript");
exports.isValidLuaIdentifier = (name) => !exports.luaKeywords.has(name) && /^[a-zA-Z_][a-zA-Z0-9_]*$/.test(name);
exports.luaKeywords = new Set([
    "and",
    "break",
    "do",
    "else",
    "elseif",
    "end",
    "false",
    "for",
    "function",
    "goto",
    "if",
    "in",
    "local",
    "nil",
    "not",
    "or",
    "repeat",
    "return",
    "then",
    "true",
    "until",
    "while",
]);
const luaBuiltins = new Set([
    "_G",
    "assert",
    "coroutine",
    "debug",
    "error",
    "ipairs",
    "math",
    "pairs",
    "pcall",
    "print",
    "rawget",
    "repeat",
    "require",
    "self",
    "string",
    "table",
    "tostring",
    "type",
    "unpack",
]);
exports.isUnsafeName = (name) => !exports.isValidLuaIdentifier(name) || luaBuiltins.has(name);
function checkName(context, name, node) {
    const isInvalid = !exports.isValidLuaIdentifier(name);
    if (isInvalid) {
        // Empty identifier is a TypeScript error
        if (name !== "") {
            context.diagnostics.push(diagnostics_1.invalidAmbientIdentifierName(node, name));
        }
    }
    return isInvalid;
}
function hasUnsafeSymbolName(context, symbol, tsOriginal) {
    const isAmbient = symbol.declarations && symbol.declarations.some(d => typescript_1.isAmbientNode(d));
    // Catch ambient declarations of identifiers with bad names
    if (isAmbient && checkName(context, symbol.name, tsOriginal)) {
        return true;
    }
    // only unsafe when non-ambient and not exported
    return exports.isUnsafeName(symbol.name) && !isAmbient && !export_1.isSymbolExported(context, symbol);
}
exports.hasUnsafeSymbolName = hasUnsafeSymbolName;
function hasUnsafeIdentifierName(context, identifier, checkSymbol = true) {
    if (checkSymbol) {
        const symbol = context.checker.getSymbolAtLocation(identifier);
        if (symbol) {
            return hasUnsafeSymbolName(context, symbol, identifier);
        }
    }
    return checkName(context, identifier.text, identifier);
}
exports.hasUnsafeIdentifierName = hasUnsafeIdentifierName;
const fixInvalidLuaIdentifier = (name) => name.replace(/[^a-zA-Z0-9_]/g, c => `_${c.charCodeAt(0).toString(16).toUpperCase()}`);
exports.createSafeName = (name) => "____" + fixInvalidLuaIdentifier(name);
//# sourceMappingURL=safe-names.js.map