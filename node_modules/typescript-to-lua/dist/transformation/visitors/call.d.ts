import * as ts from "typescript";
import * as lua from "../../LuaAST";
import { FunctionVisitor, TransformationContext } from "../context";
export declare type PropertyCallExpression = ts.CallExpression & {
    expression: ts.PropertyAccessExpression;
};
export declare function flattenSpreadExpressions(context: TransformationContext, expressions: readonly ts.Expression[]): lua.Expression[];
export declare function transformArguments(context: TransformationContext, params: readonly ts.Expression[], signature?: ts.Signature, callContext?: ts.Expression): lua.Expression[];
export declare function transformContextualCallExpression(context: TransformationContext, node: ts.CallExpression | ts.TaggedTemplateExpression, transformedArguments: lua.Expression[]): lua.Expression;
export declare const transformCallExpression: FunctionVisitor<ts.CallExpression>;
export declare const transformSpreadElement: FunctionVisitor<ts.SpreadElement>;
