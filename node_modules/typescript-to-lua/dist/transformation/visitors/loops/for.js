"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformForStatement = void 0;
const ts = require("typescript");
const lua = require("../../../LuaAST");
const variable_declaration_1 = require("../variable-declaration");
const utils_1 = require("./utils");
exports.transformForStatement = (statement, context) => {
    const result = [];
    if (statement.initializer) {
        if (ts.isVariableDeclarationList(statement.initializer)) {
            variable_declaration_1.checkVariableDeclarationList(context, statement.initializer);
            // local initializer = value
            result.push(...statement.initializer.declarations.flatMap(d => variable_declaration_1.transformVariableDeclaration(context, d)));
        }
        else {
            result.push(...context.transformStatements(ts.createExpressionStatement(statement.initializer)));
        }
    }
    const condition = statement.condition
        ? context.transformExpression(statement.condition)
        : lua.createBooleanLiteral(true);
    // Add body
    const body = utils_1.transformLoopBody(context, statement);
    if (statement.incrementor) {
        body.push(...context.transformStatements(ts.createExpressionStatement(statement.incrementor)));
    }
    // while (condition) do ... end
    result.push(lua.createWhileStatement(lua.createBlock(body), condition));
    return lua.createDoStatement(result, statement);
};
//# sourceMappingURL=for.js.map