"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.literalVisitors = exports.createShorthandIdentifier = exports.transformPropertyName = void 0;
const ts = require("typescript");
const lua = require("../../LuaAST");
const utils_1 = require("../../utils");
const diagnostics_1 = require("../utils/diagnostics");
const export_1 = require("../utils/export");
const lualib_1 = require("../utils/lualib");
const safe_names_1 = require("../utils/safe-names");
const symbols_1 = require("../utils/symbols");
const typescript_1 = require("../utils/typescript");
const function_1 = require("./function");
const call_1 = require("./call");
const multi_1 = require("./language-extensions/multi");
// TODO: Move to object-literal.ts?
function transformPropertyName(context, node) {
    if (ts.isComputedPropertyName(node)) {
        return context.transformExpression(node.expression);
    }
    else if (ts.isIdentifier(node)) {
        return lua.createStringLiteral(node.text);
    }
    else if (ts.isPrivateIdentifier(node)) {
        throw new Error("PrivateIdentifier is not supported");
    }
    else {
        return context.transformExpression(node);
    }
}
exports.transformPropertyName = transformPropertyName;
function createShorthandIdentifier(context, valueSymbol, propertyIdentifier) {
    const propertyName = propertyIdentifier.text;
    const isUnsafeName = valueSymbol
        ? safe_names_1.hasUnsafeSymbolName(context, valueSymbol, propertyIdentifier)
        : safe_names_1.hasUnsafeIdentifierName(context, propertyIdentifier, false);
    const name = isUnsafeName ? safe_names_1.createSafeName(propertyName) : propertyName;
    let identifier = context.transformExpression(ts.createIdentifier(name));
    lua.setNodeOriginal(identifier, propertyIdentifier);
    if (valueSymbol !== undefined && lua.isIdentifier(identifier)) {
        identifier.symbolId = symbols_1.getSymbolIdOfSymbol(context, valueSymbol);
        const exportScope = export_1.getSymbolExportScope(context, valueSymbol);
        if (exportScope) {
            identifier = export_1.createExportedIdentifier(context, identifier, exportScope);
        }
    }
    return identifier;
}
exports.createShorthandIdentifier = createShorthandIdentifier;
const transformNumericLiteralExpression = expression => {
    if (expression.text === "Infinity") {
        const math = lua.createIdentifier("math");
        const huge = lua.createStringLiteral("huge");
        return lua.createTableIndexExpression(math, huge, expression);
    }
    return lua.createNumericLiteral(Number(expression.text), expression);
};
const transformObjectLiteralExpression = (expression, context) => {
    const violations = multi_1.findMultiAssignmentViolations(context, expression);
    if (violations.length > 0) {
        context.diagnostics.push(...violations.map(e => diagnostics_1.invalidMultiFunctionUse(e)));
        return lua.createNilLiteral(expression);
    }
    let properties = [];
    const tableExpressions = [];
    for (const element of expression.properties) {
        const name = element.name ? transformPropertyName(context, element.name) : undefined;
        if (ts.isPropertyAssignment(element)) {
            const expression = context.transformExpression(element.initializer);
            properties.push(lua.createTableFieldExpression(expression, name, element));
        }
        else if (ts.isShorthandPropertyAssignment(element)) {
            const valueSymbol = context.checker.getShorthandAssignmentValueSymbol(element);
            if (valueSymbol) {
                symbols_1.trackSymbolReference(context, valueSymbol, element.name);
            }
            const identifier = createShorthandIdentifier(context, valueSymbol, element.name);
            properties.push(lua.createTableFieldExpression(identifier, name, element));
        }
        else if (ts.isMethodDeclaration(element)) {
            const expression = function_1.transformFunctionLikeDeclaration(element, context);
            properties.push(lua.createTableFieldExpression(expression, name, element));
        }
        else if (ts.isSpreadAssignment(element)) {
            // Create a table for preceding properties to preserve property order
            // { x: 0, ...{ y: 2 }, y: 1, z: 2 } --> __TS__ObjectAssign({x = 0}, {y = 2}, {y = 1, z = 2})
            if (properties.length > 0) {
                const tableExpression = lua.createTableExpression(properties, expression);
                tableExpressions.push(tableExpression);
                properties = [];
            }
            const type = context.checker.getTypeAtLocation(element.expression);
            let tableExpression;
            if (typescript_1.isArrayType(context, type)) {
                tableExpression = lualib_1.transformLuaLibFunction(context, lualib_1.LuaLibFeature.ArrayToObject, element.expression, context.transformExpression(element.expression));
            }
            else {
                tableExpression = context.transformExpression(element.expression);
            }
            tableExpressions.push(tableExpression);
        }
        else if (ts.isAccessor(element)) {
            context.diagnostics.push(diagnostics_1.unsupportedAccessorInObjectLiteral(element));
        }
        else {
            utils_1.assertNever(element);
        }
    }
    if (tableExpressions.length === 0) {
        return lua.createTableExpression(properties, expression);
    }
    else {
        if (properties.length > 0) {
            const tableExpression = lua.createTableExpression(properties, expression);
            tableExpressions.push(tableExpression);
        }
        if (tableExpressions[0].kind !== lua.SyntaxKind.TableExpression) {
            tableExpressions.unshift(lua.createTableExpression(undefined, expression));
        }
        return lualib_1.transformLuaLibFunction(context, lualib_1.LuaLibFeature.ObjectAssign, expression, ...tableExpressions);
    }
};
const transformArrayLiteralExpression = (expression, context) => {
    const filteredElements = expression.elements.map(e => ts.isOmittedExpression(e) ? ts.createIdentifier("undefined") : e);
    const values = call_1.flattenSpreadExpressions(context, filteredElements).map(e => lua.createTableFieldExpression(e));
    return lua.createTableExpression(values, expression);
};
exports.literalVisitors = {
    [ts.SyntaxKind.NullKeyword]: node => lua.createNilLiteral(node),
    [ts.SyntaxKind.TrueKeyword]: node => lua.createBooleanLiteral(true, node),
    [ts.SyntaxKind.FalseKeyword]: node => lua.createBooleanLiteral(false, node),
    [ts.SyntaxKind.NumericLiteral]: transformNumericLiteralExpression,
    [ts.SyntaxKind.StringLiteral]: node => lua.createStringLiteral(node.text, node),
    [ts.SyntaxKind.NoSubstitutionTemplateLiteral]: node => lua.createStringLiteral(node.text, node),
    [ts.SyntaxKind.ObjectLiteralExpression]: transformObjectLiteralExpression,
    [ts.SyntaxKind.ArrayLiteralExpression]: transformArrayLiteralExpression,
};
//# sourceMappingURL=literal.js.map