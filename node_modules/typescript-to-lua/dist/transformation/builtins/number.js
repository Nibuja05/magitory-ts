"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformNumberConstructorCall = exports.transformNumberPrototypeCall = void 0;
const lua = require("../../LuaAST");
const diagnostics_1 = require("../utils/diagnostics");
const lualib_1 = require("../utils/lualib");
const call_1 = require("../visitors/call");
function transformNumberPrototypeCall(context, node) {
    const expression = node.expression;
    const signature = context.checker.getResolvedSignature(node);
    const params = call_1.transformArguments(context, node.arguments, signature);
    const caller = context.transformExpression(expression.expression);
    const expressionName = expression.name.text;
    switch (expressionName) {
        case "toString":
            return params.length === 0
                ? lua.createCallExpression(lua.createIdentifier("tostring"), [caller], node)
                : lualib_1.transformLuaLibFunction(context, lualib_1.LuaLibFeature.NumberToString, node, caller, ...params);
        default:
            context.diagnostics.push(diagnostics_1.unsupportedProperty(expression.name, "number", expressionName));
    }
}
exports.transformNumberPrototypeCall = transformNumberPrototypeCall;
function transformNumberConstructorCall(context, expression) {
    const method = expression.expression;
    const parameters = call_1.transformArguments(context, expression.arguments);
    const methodName = method.name.text;
    switch (methodName) {
        case "isNaN":
            return lualib_1.transformLuaLibFunction(context, lualib_1.LuaLibFeature.NumberIsNaN, expression, ...parameters);
        case "isFinite":
            return lualib_1.transformLuaLibFunction(context, lualib_1.LuaLibFeature.NumberIsFinite, expression, ...parameters);
        default:
            context.diagnostics.push(diagnostics_1.unsupportedProperty(method.name, "Number", methodName));
    }
}
exports.transformNumberConstructorCall = transformNumberConstructorCall;
//# sourceMappingURL=number.js.map