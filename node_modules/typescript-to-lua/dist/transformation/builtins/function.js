"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformFunctionProperty = exports.transformFunctionPrototypeCall = void 0;
const CompilerOptions_1 = require("../../CompilerOptions");
const lua = require("../../LuaAST");
const diagnostics_1 = require("../utils/diagnostics");
const function_context_1 = require("../utils/function-context");
const lua_ast_1 = require("../utils/lua-ast");
const lualib_1 = require("../utils/lualib");
const call_1 = require("../visitors/call");
function transformFunctionPrototypeCall(context, node) {
    const expression = node.expression;
    const callerType = context.checker.getTypeAtLocation(expression.expression);
    if (function_context_1.getFunctionContextType(context, callerType) === function_context_1.ContextType.Void) {
        context.diagnostics.push(diagnostics_1.unsupportedSelfFunctionConversion(node));
    }
    const signature = context.checker.getResolvedSignature(node);
    const params = call_1.transformArguments(context, node.arguments, signature);
    const caller = context.transformExpression(expression.expression);
    const expressionName = expression.name.text;
    switch (expressionName) {
        case "apply":
            return lua.createCallExpression(caller, [params[0], lua_ast_1.createUnpackCall(context, params[1], node.arguments[1])], node);
        case "bind":
            return lualib_1.transformLuaLibFunction(context, lualib_1.LuaLibFeature.FunctionBind, node, caller, ...params);
        case "call":
            return lua.createCallExpression(caller, params, node);
        default:
            context.diagnostics.push(diagnostics_1.unsupportedProperty(expression.name, "function", expressionName));
    }
}
exports.transformFunctionPrototypeCall = transformFunctionPrototypeCall;
function transformFunctionProperty(context, node) {
    switch (node.name.text) {
        case "length":
            if (context.luaTarget === CompilerOptions_1.LuaTarget.Lua51 || context.luaTarget === CompilerOptions_1.LuaTarget.Universal) {
                context.diagnostics.push(diagnostics_1.unsupportedForTarget(node, "function.length", CompilerOptions_1.LuaTarget.Lua51));
            }
            // debug.getinfo(fn)
            const getInfoCall = lua.createCallExpression(lua.createTableIndexExpression(lua.createIdentifier("debug"), lua.createStringLiteral("getinfo")), [context.transformExpression(node.expression)]);
            const nparams = lua.createTableIndexExpression(getInfoCall, lua.createStringLiteral("nparams"));
            const contextType = function_context_1.getFunctionContextType(context, context.checker.getTypeAtLocation(node.expression));
            return contextType === function_context_1.ContextType.NonVoid
                ? lua.createBinaryExpression(nparams, lua.createNumericLiteral(1), lua.SyntaxKind.SubtractionOperator)
                : nparams;
        default:
            context.diagnostics.push(diagnostics_1.unsupportedProperty(node.name, "function", node.name.text));
    }
}
exports.transformFunctionProperty = transformFunctionProperty;
//# sourceMappingURL=function.js.map