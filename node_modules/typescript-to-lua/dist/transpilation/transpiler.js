"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transpiler = void 0;
const path = require("path");
const ts = require("typescript");
const CompilerOptions_1 = require("../CompilerOptions");
const LuaLib_1 = require("../LuaLib");
const utils_1 = require("../utils");
const bundle_1 = require("./bundle");
const transpile_1 = require("./transpile");
class Transpiler {
    constructor({ emitHost = ts.sys } = {}) {
        this.emitHost = emitHost;
    }
    emit(emitOptions) {
        var _a;
        const { program, writeFile = this.emitHost.writeFile } = emitOptions;
        const { diagnostics, transpiledFiles: freshFiles } = transpile_1.getProgramTranspileResult(this.emitHost, writeFile, emitOptions);
        const { emitPlan } = this.getEmitPlan(program, diagnostics, freshFiles);
        const options = program.getCompilerOptions();
        const emitBOM = (_a = options.emitBOM) !== null && _a !== void 0 ? _a : false;
        for (const { outputPath, code, sourceMap, sourceFiles } of emitPlan) {
            writeFile(outputPath, code, emitBOM, undefined, sourceFiles);
            if (options.sourceMap && sourceMap !== undefined) {
                writeFile(outputPath + ".map", sourceMap, emitBOM, undefined, sourceFiles);
            }
        }
        return { diagnostics, emitSkipped: emitPlan.length === 0 };
    }
    getEmitPlan(program, diagnostics, files) {
        var _a;
        const options = program.getCompilerOptions();
        const rootDir = program.getCommonSourceDirectory();
        const outDir = (_a = options.outDir) !== null && _a !== void 0 ? _a : rootDir;
        const lualibRequired = files.some(f => f.code.includes('require("lualib_bundle")'));
        if (lualibRequired) {
            const fileName = utils_1.normalizeSlashes(path.resolve(rootDir, "lualib_bundle.lua"));
            files.unshift({ fileName, code: LuaLib_1.getLuaLibBundle(this.emitHost) });
        }
        let emitPlan;
        if (CompilerOptions_1.isBundleEnabled(options)) {
            const [bundleDiagnostics, bundleFile] = bundle_1.getBundleResult(program, this.emitHost, files);
            diagnostics.push(...bundleDiagnostics);
            emitPlan = [bundleFile];
        }
        else {
            emitPlan = files.map(file => {
                const pathInOutDir = path.resolve(outDir, path.relative(rootDir, file.fileName));
                const outputPath = utils_1.normalizeSlashes(utils_1.trimExtension(pathInOutDir) + ".lua");
                return { ...file, outputPath };
            });
        }
        return { emitPlan };
    }
}
exports.Transpiler = Transpiler;
//# sourceMappingURL=transpiler.js.map