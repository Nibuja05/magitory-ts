"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBundleResult = void 0;
const path = require("path");
const source_map_1 = require("source-map");
const LuaPrinter_1 = require("../LuaPrinter");
const utils_1 = require("../utils");
const diagnostics_1 = require("./diagnostics");
const createModulePath = (baseDir, pathToResolve) => LuaPrinter_1.escapeString(utils_1.formatPathToLuaPath(utils_1.trimExtension(path.relative(baseDir, pathToResolve))));
// Override `require` to read from ____modules table.
const requireOverride = `
local ____modules = {}
local ____moduleCache = {}
local ____originalRequire = require
local function require(file)
    if ____moduleCache[file] then
        return ____moduleCache[file]
    end
    if ____modules[file] then
        ____moduleCache[file] = ____modules[file]()
        return ____moduleCache[file]
    else
        if ____originalRequire then
            return ____originalRequire(file)
        else
            error("module '" .. file .. "' not found")
        end
    end
end
`;
function getBundleResult(program, emitHost, files) {
    var _a;
    const diagnostics = [];
    const options = program.getCompilerOptions();
    const bundleFile = utils_1.cast(options.luaBundle, utils_1.isNonNull);
    const entryModule = utils_1.cast(options.luaBundleEntry, utils_1.isNonNull);
    const rootDir = program.getCommonSourceDirectory();
    const outDir = (_a = options.outDir) !== null && _a !== void 0 ? _a : rootDir;
    const projectRootDir = options.configFilePath
        ? path.dirname(options.configFilePath)
        : emitHost.getCurrentDirectory();
    // Resolve project settings relative to project file.
    const resolvedEntryModule = path.resolve(projectRootDir, entryModule);
    const outputPath = utils_1.normalizeSlashes(path.resolve(projectRootDir, bundleFile));
    if (!files.some(f => f.fileName === resolvedEntryModule)) {
        diagnostics.push(diagnostics_1.couldNotFindBundleEntryPoint(entryModule));
        return [diagnostics, { outputPath, code: "" }];
    }
    // For each file: ["<module path>"] = function() <lua content> end,
    const moduleTableEntries = files.map(f => moduleSourceNode(f, createModulePath(outDir, f.fileName)));
    // Create ____modules table containing all entries from moduleTableEntries
    const moduleTable = createModuleTableNode(moduleTableEntries);
    // return require("<entry module path>")
    const entryPoint = `return require(${createModulePath(outDir, resolvedEntryModule)})\n`;
    const bundleNode = joinSourceChunks([requireOverride, moduleTable, entryPoint]);
    const { code, map } = bundleNode.toStringWithSourceMap();
    return [
        diagnostics,
        {
            outputPath,
            code,
            sourceMap: map.toString(),
            sourceFiles: files.flatMap(x => { var _a; return (_a = x.sourceFiles) !== null && _a !== void 0 ? _a : []; }),
        },
    ];
}
exports.getBundleResult = getBundleResult;
function moduleSourceNode({ code, sourceMapNode }, modulePath) {
    const tableEntryHead = `[${modulePath}] = function() `;
    const tableEntryTail = "end,\n";
    return joinSourceChunks([tableEntryHead, sourceMapNode !== null && sourceMapNode !== void 0 ? sourceMapNode : code, tableEntryTail]);
}
function createModuleTableNode(fileChunks) {
    const tableHead = "____modules = {\n";
    const tableEnd = "}\n";
    return joinSourceChunks([tableHead, ...fileChunks, tableEnd]);
}
function joinSourceChunks(chunks) {
    return new source_map_1.SourceNode(null, null, null, chunks);
}
//# sourceMappingURL=bundle.js.map